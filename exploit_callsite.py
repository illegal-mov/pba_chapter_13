#!/usr/bin/python3

import pintool, triton

INDIRECT_CALL = 0x1368
TARGET_ADDR = 0x128d

Triton = pintool.getTritonContext()

def symbolize_inputs(threadId):
    rdi = pintool.getCurrentRegisterValue(Triton.registers.rdi) # argc
    rsi = pintool.getCurrentRegisterValue(Triton.registers.rsi) # argv

    while rdi > 1:
        addr = pintool.getCurrentMemoryValue(
            rsi + ((rdi-1) * triton.CPUSIZE.QWORD),
            triton.CPUSIZE.QWORD)

        c = None
        s = ""
        while c != 0:
            c = pintool.getCurrentMemoryValue(addr)
            s += chr(c)
            Triton.setConcreteMemoryValue(addr, c)
            Triton.convertMemoryToSymbolicVariable(
                triton.MemoryAccess(addr, triton.CPUSIZE.BYTE)
                ).setComment(f"argv[{rdi-1}][{len(s)-1}]")
            addr += 1
        rdi -= 1
        print(f"Symbolized argument {rdi}: {s}")

def hook_icall(insn):
    if insn.isControlFlow() and insn.getAddress() == INDIRECT_CALL:
        for operand in insn.getOperands():
            if operand.getType() == triton.OPERAND.REG:
                print(f"Found vulnerable indirect call '{insn}'")
                exploit_icall(insn, operand)

def exploit_icall(insn, operand):
    regId = Triton.getSymbolicRegisterId(operand)
    regExpr = Triton.unrollAst(Triton.getAstFromId(regId))
    ast = Triton.getAstContext()

    exploitExpr = ast.equal(regExpr, ast.bv(TARGET_ADDR, triton.CPUSIZE.QWORD_BIT))
    for key,value in Triton.getSymbolicVariables().iteritems():
        if "argv" in value.getComment():
            # Argument characters must be printable
            argExpr = Triton.getAstFromId(key)
            argExpr = ast.land([
                ast.bvuge(argExpr, ast.bv(32, triton.CPUSIZE.BYTE_BIT)),
                ast.bvule(argExpr, ast.bv(126 triton.CPUSIZE.BYTE_BIT))])
            exploitExpr = ast.land([exploitExpr, argExpr])

    print(f"Getting model for {insn} -> 0x{TARGET_ADDR:x}")
    model = Triton.getModel(exploitExpr)
    for key,value in model.iteritems():
        print("{key} ({Triton.getSymbolicVariableFromId(key).getComment()})")

def main(argv):
    Triton.setArchitecture(triton.ARCH.X86_64)
    Triton.enableMode(triton.MODE.ALIGNED_MEMORY, True)

    pintool.startAnalysisFromSymbol("main")

    pintool.insertCall(symbolize_inputs, pintool.INSERT_POINT.ROUTINE_ENTRY, "main")
    pintool.insertCall(hook_icall, pintool.INSERT_POINT.BEFORE)

    pintool.runProgram()
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main(sys.argv))

